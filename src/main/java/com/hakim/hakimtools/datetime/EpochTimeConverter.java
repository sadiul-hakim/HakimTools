package com.hakim.hakimtools.datetime;

import com.formdev.flatlaf.FlatLightLaf;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.UIManager;

/**
 *
 * @author Hakim
 */
public class EpochTimeConverter extends javax.swing.JFrame {

    /**
     * Creates new form EpochTimeConverter
     */
    public EpochTimeConverter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        epochTimeField = new javax.swing.JTextField();
        epochTypeChooser = new javax.swing.JComboBox<>();
        epochToDateBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        readableDateResult = new javax.swing.JLabel();
        currentEpochChooser = new javax.swing.JComboBox<>();
        currentEpochBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        currentEpochResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Epoch Converter");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        epochTimeField.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        epochTypeChooser.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        epochTypeChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seconds", "Milliseconds" }));

        epochToDateBtn.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        epochToDateBtn.setText("Convert");
        epochToDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epochToDateBtnActionPerformed(evt);
            }
        });

        readableDateResult.setFont(new java.awt.Font("Fira Code", 0, 14)); // NOI18N
        readableDateResult.setForeground(new java.awt.Color(204, 0, 204));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(readableDateResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(readableDateResult, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap())
        );

        currentEpochChooser.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        currentEpochChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seconds", "Milliseconds" }));

        currentEpochBtn.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N
        currentEpochBtn.setText("Current Epoch");
        currentEpochBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentEpochBtnActionPerformed(evt);
            }
        });

        currentEpochResult.setFont(new java.awt.Font("Fira Code", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentEpochResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentEpochResult, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(currentEpochChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(currentEpochBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(epochTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(epochTypeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(epochToDateBtn)))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epochTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epochTypeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(epochToDateBtn))
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentEpochChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentEpochBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void epochToDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epochToDateBtnActionPerformed

        String epochDate = epochTimeField.getText();
        String selectedItem = epochTypeChooser.getSelectedItem().toString();

        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");

        if (selectedItem.equalsIgnoreCase(EpochType.Seconds.name())) {
            Instant instant = Instant.ofEpochSecond(Long.valueOf(epochDate));

            // Convert Instant to LocalDateTime using a specific time zone
            ZoneId zoneId = ZoneId.systemDefault(); // You can use other time zones as well
            ZonedDateTime dateTime = instant.atZone(zoneId);
            readableDateResult.setText(dateTime.format(dateTimeFormatter));

        } else {
            Instant instant = Instant.ofEpochMilli(Long.valueOf(epochDate));

            // Convert Instant to LocalDateTime using a specific time zone
            ZoneId zoneId = ZoneId.systemDefault(); // You can use other time zones as well
            ZonedDateTime dateTime = instant.atZone(zoneId);
            readableDateResult.setText(dateTime.format(dateTimeFormatter));
        }

    }//GEN-LAST:event_epochToDateBtnActionPerformed

    private void currentEpochBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentEpochBtnActionPerformed

        String selectedItem = currentEpochChooser.getSelectedItem().toString();
        Instant instant = Instant.now();
        if (selectedItem.equalsIgnoreCase(EpochType.Seconds.name())) {

            currentEpochResult.setText(String.valueOf(instant.getEpochSecond()));
        } else {

            currentEpochResult.setText(String.valueOf(instant.toEpochMilli()));
        }
    }//GEN-LAST:event_currentEpochBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EpochTimeConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EpochTimeConverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton currentEpochBtn;
    private javax.swing.JComboBox<String> currentEpochChooser;
    private javax.swing.JLabel currentEpochResult;
    private javax.swing.JTextField epochTimeField;
    private javax.swing.JButton epochToDateBtn;
    private javax.swing.JComboBox<String> epochTypeChooser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel readableDateResult;
    // End of variables declaration//GEN-END:variables

    enum EpochType {
        Seconds,
        Milliseconds;
    }
}
